# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "{{ telegraf_agent_interval }}"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = {{ telegraf_agent_round_interval }}

  ## Telegraf will send metrics to outputs in batches of at
  ## most metric_batch_size metrics.
  metric_batch_size = {{ telegraf_agent_metric_batch_size }}
  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  metric_buffer_limit = {{ telegraf_agent_metric_buffer_limit }}

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "{{ telegraf_agent_collection_jitter }}"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "{{ telegraf_agent_flush_interval }}"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "{{ telegraf_agent_flush_jitter }}"

  ## Run telegraf in debug mode
  debug = {{ telegraf_agent_debug }}
  ## Run telegraf in quiet mode
  quiet = {{ telegraf_agent_quiet }}
  ## Override default hostname, if empty use os.Hostname()
  hostname = "{{ telegraf_agent_hostname }}"
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = {{ telegraf_agent_omit_hostname }}


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
{% for name, output in plugins.outputs.iteritems() %}
[[outputs.{{ name }}]]
  {% for key, value in output.iteritems() %}
    {% if value is string %}
      {{ key }} = "{{ value }}"
    {% elif value is sequence and value[0] is string %}
      {{ key }} = ['{{ "', '".join(value) }}']
    {% elif value is sequence and value[0] is number %}
      {{ key }} = [{%- for v in value -%} {{ v }},{%- endfor -%}]
    {% else %}
      {{ key }} = {{ value | string | lower }}
    {% endif %}
  {% endfor %}
{% endfor %}

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
{% for name, input in plugins.inputs.iteritems() %}
[[inputs.{{ name }}]]
  {% for key, value in input.iteritems() %}
    {% if value is string %}
      {{ key }} = "{{ value }}"
    {% elif value is sequence and value[0] is string %}
      {{ key }} = ['{{ "', '".join(value) }}']
    {% elif value is sequence and value[0] is number %}
      {{ key }} = [{%- for v in value -%} {{ v }},{%- endfor -%}]
    {% else %}
      {{ key }} = {{ value | string | lower }}
    {% endif %}
  {% endfor %}
{% endfor %}
