#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import hashlib

DOCUMENTATION = """
---
module: telegraf_config
version_added: 2.1
short_description: Manages telegraf configuration files.
description:
   - Installs the telegraf package.
   - Manages telegraf configuration files.

options:
  name:
    description:
      - Name of the telegraf config file.
    required: true
  plugins:
    description:
      - dict of plugin configurations to render.
    required: false
  template:
    description:
      - a template to render for the configuration file
    required: false
  state:
   description:
     - Indicate the desired state of the resource.
   choices: ['present', 'absent']
   default: present
requirements: ["telegraf"]


"""

EXAMPLES = """

- name: Tail mcrouter log output
  telegraf_config:
  name: mcrouter
  plugins:
    input:
      tail:
        name_prefix: mcrouter_log
        from_beginning: true
        data_format: value
        data_type: string
        files:
          - /var/log/mcrouter/mcrouter.log

- name: Render configuration from template
  telegraf_config:
    name: mcrouter
    template: mcrouter.conf.j2

- name: ensure nginx input is absent
  telegraf_config:
    name: nginx
    state: absent

"""


PLUGIN_TEMPLATE = """
###############################################################################
#                            {type} PLUGINS                                   #
###############################################################################
{config}

"""

def to_toml(o):
    """Returns a string containing the toml corresponding to o, a dictionary"""
    retval = ""
    addtoretval, sections = _dump_sections(o, "")
    retval += addtoretval
    while sections != {}:
        newsections = {}
        for section in sections:
            addtoretval, addtosections = _dump_sections(sections[section], section)
            if addtoretval:
                retval += "["+section+"]\n"
                retval += addtoretval
            for s in addtosections:
                newsections[section+"."+s] = addtosections[s]
        sections = newsections
    return retval

def _dump_sections(o, sup):
    retstr = ""
    if sup != "" and sup[-1] != ".":
        sup += '.'
    retdict = {}
    arraystr = ""
    for section in o:
        qsection = section
        if not re.match(r'^[A-Za-z0-9_-]+$', section):
            if '"' in section:
                qsection = "'" + section + "'"
            else:
                qsection = '"' + section + '"'
        if not isinstance(o[section], dict):
            arrayoftables = False
            if isinstance(o[section], list):
                for a in o[section]:
                    if isinstance(a, dict):
                        arrayoftables = True
            if arrayoftables:
                for a in o[section]:
                    arraytabstr = ""
                    arraystr += "[["+sup+qsection+"]]\n"
                    s, d = _dump_sections(a, sup+qsection)
                    if s:
                        if s[0] == "[":
                            arraytabstr += s
                        else:
                            arraystr += s
                    while d != {}:
                        newd = {}
                        for dsec in d:
                            s1, d1 = _dump_sections(d[dsec], sup+qsection+"."+dsec)
                            if s1:
                                arraytabstr += "["+sup+qsection+"."+dsec+"]\n"
                                arraytabstr += s1
                            for s1 in d1:
                                newd[dsec+"."+s1] = d1[s1]
                        d = newd
                    arraystr += arraytabstr
            else:
                if o[section] is not None:
                    retstr += (qsection + " = " +
                               str(_dump_value(o[section])) + '\n')
        else:
            retdict[qsection] = o[section]
    retstr += arraystr
    return (retstr, retdict)

def _dump_value(v):
    if isinstance(v, list):
        t = []
        retval = "["
        for u in v:
            t.append(_dump_value(u))
        while t != []:
            s = []
            for u in t:
                if isinstance(u, list):
                    for r in u:
                        s.append(r)
                else:
                    retval += " " + str(u) + ","
            t = s
        retval += "]"
        return retval
    if isinstance(v, (str, unicode)):
        v = "%r" % v
        if v[0] == 'u':
            v = v[1:]
        singlequote = v[0] == "'"
        v = v[1:-1]
        if singlequote:
            v = v.replace("\\'", "'")
            v = v.replace('"', '\\"')
        v = v.replace("\\x", "\\u00")
        return str('"'+v+'"')
    if isinstance(v, bool):
        return str(v).lower()
    if isinstance(v, datetime.datetime):
        return v.isoformat()[:19]+'Z'
    if isinstance(v, float):
        return str(v)
    return v

def _get_config_path(module):
    name = module.params.get('name')
    config_dir = module.params.get('config_dir')

    return os.path.join(config_dir, name)


def _write_config(config, config_path):
    with open(config_path, 'w') as f:
        f.write(config)


def _get_config(module):
    output = []

    if module.params.get('plugins'):
        plugins = module.params.get('plugins')
        for plugin_type, config in plugins.iteritems():
            output.append(PLUGIN_TEMPLATE.format(type=plugin_type,
                config=to_toml({plugin_type: config})))
        return "\n".join(output)


def _add_config(module):
    config_path = _get_config_path(module)
    config = _get_config(module)

    _write_config(config, config_path)
    module.exit_json(changed=True, result="Success")

def _remove_config(module):
    pass

def main():
    module = AnsibleModule(argument_spec=dict(
        name=dict(required=True),
        plugins=dict(required=False, type='dict'),
        template=dict(required=False),
        config_dir=dict(default='/etc/telegraf/telegraf.d/'),
        state=dict(default='present',
                   choices=['absent', 'present']),
        )
    )

    if module.params.get('state') == 'present':
        _add_config(module)

    if module.params.get('state') == 'absent':
        _remove_config(module)

# this is magic, see lib/ansible/module_common.py
from ansible.module_utils.basic import *
main()
